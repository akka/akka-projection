// Copyright 2022 Lightbend Inc.

syntax = "proto3";

package akka.projection.grpc;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option java_package = "akka.projection.grpc.internal.proto";

service EventProducerService {
  rpc EventsBySlices(stream StreamIn) returns (stream StreamOut);

  rpc EventTimestamp(EventTimestampRequest) returns (EventTimestampResponse);

  rpc LoadEvent(LoadEventRequest) returns (LoadEventResponse);
}

message StreamIn {
  oneof message {
    InitReq init = 1;
    FilterEntityIdsReq filter_entity_ids = 2;
  }
}

message InitReq {
  // the logical stream identifier, mapped to a specific internal entity type by
  // the producer settings
  string stream_id = 1;
  // entities are partitioned by a deterministic slice (0-1023),
  // a consumer would handle a slice range from slice_min to slice_max
  int32 slice_min = 2;
  int32 slice_max = 3;
  Offset offset = 4;
  // FIXME InitReq should also be able to include filter
}

message FilterEntityIdsReq {
  repeated string include_entity_ids = 1;
  repeated string exclude_entity_ids = 2;
}

message Offset {
  google.protobuf.Timestamp timestamp = 1;
  // events with these sequence numbers for this timestamp have already been
  // processed and doesn't have to be emitted again
  repeated PersistenceIdSeqNr seen = 2;
}

message PersistenceIdSeqNr {
  string persistence_id = 1;
  int64 seq_nr = 2;
}


message StreamOut {
  oneof message {
    Event event = 1;
    FilteredEvent filtered_event = 2;
  }
}

message Event {
  string persistence_id = 1;
  int64 seq_nr = 2;
  int32 slice = 3;
  Offset offset = 4;
  // Actual payload and metadata serialization is deferred to Akka serialization,
  // the serializer id and manifest are encoded into a custom type_url schema
  google.protobuf.Any payload = 5;
  string source = 6;
  google.protobuf.Any metadata = 7;
}


// Events that are filtered out are represented by this
// placeholder to be able to track sequence numbers without holes.
message FilteredEvent {
  string persistence_id = 1;
  int64 seq_nr = 2;
  int32 slice = 3;
  Offset offset = 4;
  string source = 5;
}

message EventTimestampRequest {
  string stream_id = 1;
  string persistence_id = 2;
  int64 seq_nr = 3;
}

message EventTimestampResponse {
  google.protobuf.Timestamp timestamp = 1;
}

message LoadEventRequest {
  // the logical stream identifier, mapped to a specific internal entity type by
  // the producer settings
  string stream_id = 1;
  string persistence_id = 2;
  int64 seq_nr = 3;
}

message LoadEventResponse {
  oneof message {
    Event event = 1;
    FilteredEvent filtered_event = 2;
  }
}


