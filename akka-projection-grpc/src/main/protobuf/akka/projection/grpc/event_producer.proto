// Copyright 2022 Lightbend Inc.

syntax = "proto3";

package akka.projection.grpc;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option java_package = "akka.projection.grpc.internal.proto";

service EventProducerService {
  rpc EventsBySlices(stream StreamIn) returns (stream StreamOut);

  rpc EventTimestamp(EventTimestampRequest) returns (EventTimestampResponse);

  rpc LoadEvent(LoadEventRequest) returns (LoadEventResponse);
}

message StreamIn {
  oneof message {
    InitReq init = 1;
    FilterReq filter = 2;
    ReplayReq replay = 3;
  }
}

// The first message must always be this InitReq to setup the stream.
// It can only be used as the first message.
message InitReq {
  // the logical stream identifier, mapped to a specific internal entity type by
  // the producer settings
  string stream_id = 1;
  // entities are partitioned by a deterministic slice (0-1023),
  // a consumer would handle a slice range from slice_min to slice_max
  int32 slice_min = 2;
  int32 slice_max = 3;
  Offset offset = 4;
  repeated FilterCriteria filter = 5;
}

// Add filter criteria to exclude and include events for matching entities.
message FilterReq {
  repeated FilterCriteria criteria = 1;
}

// Replay events for given entities.
message ReplayReq {
  repeated PersistenceIdSeqNr persistence_id_offset = 1;
}

message FilterCriteria {
  // Exclude criteria are evaluated first.
  // If no matching exclude criteria the event is emitted.
  // If an exclude criteria is matching the include criteria are evaluated.
  //   If no matching include criteria the event is discarded.
  //   If matching include criteria the event is emitted.
  oneof message {
    ExcludeTags exclude_tags = 1;
    RemoveExcludeTags remove_exclude_tags = 2;
    IncludeTags include_tags = 3;
    RemoveIncludeTags remove_include_tags = 4;
    ExcludeRegexEntityIds exclude_matching_entity_ids = 5;
    RemoveExcludeRegexEntityIds remove_exclude_matching_entity_ids = 6;
    ExcludeEntityIds exclude_entity_ids = 7;
    RemoveExcludeEntityIds remove_exclude_entity_ids = 8;
    IncludeEntityIds include_entity_ids = 9;
    RemoveIncludeEntityIds remove_include_entity_ids = 10;
  }
}

message ExcludeTags {
  repeated string tags = 1;
}

message RemoveExcludeTags {
  repeated string tags = 1;
}

message IncludeTags {
  repeated string tags = 1;
}

message RemoveIncludeTags {
  repeated string tags = 1;
}

message IncludeEntityIds {
  repeated EntityIdOffset entity_id_offset = 1;
}

message EntityIdOffset {
  string entity_id = 1;
  // If this is defined (> 0) events are replayed from the given
  // sequence number (inclusive).
  int64 seq_nr = 2;
}

message RemoveIncludeEntityIds {
  repeated string entity_ids = 1;
}

message ExcludeEntityIds {
  repeated string entity_ids = 1;
}

message RemoveExcludeEntityIds {
  repeated string entity_ids = 1;
}

message ExcludeRegexEntityIds {
  repeated string matching = 1;
}

message RemoveExcludeRegexEntityIds {
  repeated string matching = 1;
}

message Offset {
  google.protobuf.Timestamp timestamp = 1;
  // events with these sequence numbers for this timestamp have already been
  // processed and doesn't have to be emitted again
  repeated PersistenceIdSeqNr seen = 2;
}

message PersistenceIdSeqNr {
  string persistence_id = 1;
  int64 seq_nr = 2;
}


message StreamOut {
  oneof message {
    Event event = 1;
    FilteredEvent filtered_event = 2;
  }
}

message Event {
  string persistence_id = 1;
  int64 seq_nr = 2;
  int32 slice = 3;
  Offset offset = 4;
  // Actual payload and metadata serialization is deferred to Akka serialization,
  // the serializer id and manifest are encoded into a custom type_url schema
  google.protobuf.Any payload = 5;
  string source = 6;
  google.protobuf.Any metadata = 7;
  repeated string tags = 8;
}


// Events that are filtered out are represented by this
// placeholder to be able to track sequence numbers without holes.
message FilteredEvent {
  string persistence_id = 1;
  int64 seq_nr = 2;
  int32 slice = 3;
  Offset offset = 4;
  string source = 5;
}

message EventTimestampRequest {
  string stream_id = 1;
  string persistence_id = 2;
  int64 seq_nr = 3;
}

message EventTimestampResponse {
  google.protobuf.Timestamp timestamp = 1;
}

message LoadEventRequest {
  // the logical stream identifier, mapped to a specific internal entity type by
  // the producer settings
  string stream_id = 1;
  string persistence_id = 2;
  int64 seq_nr = 3;
}

message LoadEventResponse {
  oneof message {
    Event event = 1;
    FilteredEvent filtered_event = 2;
  }
}


