// Copyright 2022 Lightbend Inc.

syntax = "proto3";

package akka.projection.grpc;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "akka/projection/grpc/event_producer.proto";

option java_package = "akka.projection.grpc.internal.proto";

// EventConsumerService runs on the consumer side and allows a producer
// to initiate/push events to the consumer.
//
// 1. Events are stored in the event journal on the producer side.
// 2. Producer side starts an Akka Projection which locally tracks its offset
//    and as projection handler pushes events to a consuming EventConsumerService
// 3. Consumer stores events directly into a journal
// 4. Consumer side projections can run against the local journal
service EventConsumerService {
  rpc ConsumeEvent(stream ConsumerEvent) returns (stream ConsumerEventAck);
}

message ConsumerEventAck {
  string persistence_id = 1;
  int64 seq_nr = 2;
}

message ConsumerEvent {
  oneof message {
    // always sent first
    ConsumerEventInit init = 1;
    Event event = 2;
  }
}

message ConsumerEventInit {
  // unique producer identifier showing where the events came from/was produced
  string origin_id = 1;
}